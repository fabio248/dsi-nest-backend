// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @default(autoincrement()) @unique()
  firstName      String    @map("first_name")
  lastName      String    @map("last_name")
  email         String    @unique()
  password      String
  role          UserRole? @default(client)
  phone         String?
  birthday      DateTime?
  direction     String?
  dui           String?   
  recoveryToken String?   @map("recovery_token")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt()    @map("updated_at")

  //relations
  pets          Pet[]
  appointments  Appointment[]

  @@map("user")
}

model Specie {
  id            Int       @default(autoincrement()) @unique()
  name          String    @unique()

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt()    @map("updated_at")

  //relations
  pets          Pet[]

  @@map("specie")
}


model Pet {
  id            Int       @default(autoincrement()) @unique()
  name          String
  gender        Gender
  raza          String
  color         String
  isHaveTatto   Boolean   @map("is_have_tatto")
  pedigree      Boolean   
  birthday      DateTime

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt()    @map("updated_at")


  //relation
  user                User             @relation(fields: [userId], references: [id])
  userId              Int              @map("user_id")

  medicalHistory      MedicalHistory?  @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId    Int?             @map("medical_history_id")

  specie              Specie           @relation(fields: [specieId], references: [id])
  specieId            Int              @map("specie_id")

  @@map("pet")
}

model MedicalHistory {
  id                Int       @default(autoincrement()) @unique()
  isHaveAllVaccine  Boolean   @map("is_have_all_vaccine")
  isReproduced      Boolean   @map("is_reproduced")
  descendants       String
  room              String
  diasesEvaluation  String    @map("diases_evaluation")
  observation       String

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt()    @map("updated_at")

  //relations
  pet               Pet[]

  food              Food          @relation(fields: [foodId],references: [id])
  foodId            Int           @map("food_id")

  physicalExam      PhysicalExam  @relation(fields: [physicalExamId],references: [id])
  physicalExamId    Int           @map("phisical_exam_id")

  otherPet          OtherPet      @relation(fields: [otherPetId],references: [id])
  otherPetId        Int           @map("other_pet_id")

  files              File[]

  @@map("medical_history")
}

model Food {
  id               Int       @default(autoincrement()) @unique()
  quantity         String
  type             String

  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt()    @map("updated_at")

  //relation
  medicalHistories MedicalHistory[]


  @@map("food")
}

model PhysicalExam {
  id                Int       @default(autoincrement()) @unique()
  weight            Float
  palpitations      String

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt()    @map("updated_at")

  //relations
  medicalHistories  MedicalHistory[]

  @@map("physical_exam")
}

model OtherPet {
  id              Int       @default(autoincrement()) @unique()
  isLiveOtherPets Boolean   @map("is_live_other_pets")
  whichPets       String?

  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt()    @map("updated_at")

  //relations
  medicalHistories MedicalHistory[]
  
  @@map("other_pet")
}

model File {
  id                Int       @default(autoincrement()) @unique()
  name              Boolean

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt()    @map("updated_at")

  //relations
  medicalHistory    MedicalHistory  @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId  Int             @map("medical_history_id")
  
  @@map("file")
}

model Appointment {
  id                Int       @default(autoincrement()) @unique()
  name              Boolean
  startDate         DateTime  @map("start_date")
  endDate           DateTime  @map("end_date")
  description       String

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt()    @map("updated_at")

  //relations
  client            User      @relation(fields: [clientId],references: [id])
  clientId          Int       @map("client_id")
  
  @@map("appointment")
}




enum UserRole {
  admin
  client
}

enum Gender{
  macho
  hembra
}