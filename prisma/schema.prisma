// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @unique() @default(autoincrement())
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  email         String    @unique()
  password      String
  role          UserRole? @default(client)
  phone         String?
  birthday      DateTime?
  direction     String?
  dui           String?
  recoveryToken String?   @map("recovery_token")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  //relations
  pets         Pet[]
  appointments Appointment[]

  @@map("user")
}

model Specie {
  id   Int    @unique() @default(autoincrement())
  name String @unique()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  //relations
  pets Pet[]

  @@map("specie")
}


model Pet {
  id          Int      @unique() @default(autoincrement())
  name        String
  gender      Gender
  raza        String
  color       String
  isHaveTatto Boolean  @map("is_have_tatto")
  pedigree    Boolean
  birthday    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  //relation
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  medicalHistories MedicalHistory[]

  specie   Specie @relation(fields: [specieId], references: [id])
  specieId Int    @map("specie_id")

  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  folderId Int?    @map("folder_id")

  @@map("pet")
}

model Folder {
  id        Int      @unique() @default(autoincrement())
  name      String   @unique()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  //relations
  pets    Pet[]
  folders File[]

  @@map("folder")
}

model MedicalHistory {
  id               Int     @unique() @default(autoincrement())
  isHaveAllVaccine Boolean @map("is_have_all_vaccine")
  isReproduced     Boolean @map("is_reproduced")
  descendants      String
  room             String
  diasesEvaluation String  @map("diases_evaluation")
  observation      String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // relations
  pet   Pet? @relation(fields: [petId], references: [id])
  petId Int? @map("pet_id")

  food   Food @relation(fields: [foodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  foodId Int  @map("food_id")

  physicalExam   PhysicalExam @relation(fields: [physicalExamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  physicalExamId Int          @map("phisical_exam_id")

  otherPet   OtherPet @relation(fields: [otherPetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  otherPetId Int      @map("other_pet_id")

  diagnostic   Diagnostic? @relation(fields: [diagnosticId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  diagnosticId Int?        @unique() @map("diagnostic_id")

  files File[]

  @@map("medical_history")
}

model Food {
  id       Int    @unique() @default(autoincrement())
  quantity String
  type     String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // relation
  medicalHistories MedicalHistory[]


  @@map("food")
}

model PhysicalExam {
  id              Int      @unique() @default(autoincrement())
  weight          Float
  palpitations    String
  temperature     Float?
  cardiacRate     Float?   @map("cardiac_rate")
  respiratoryRate Float?   @map("respiratory_rate")
  pulse           String?
  mucous          String?
  laboratoryExam  String?  @map("laboratory_exam")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt() @map("updated_at")

  // relations
  medicalHistories MedicalHistory[]

  @@map("physical_exam")
}

model OtherPet {
  id              Int     @unique() @default(autoincrement())
  isLiveOtherPets Boolean @map("is_live_other_pets")
  whichPets       String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // relations
  medicalHistories MedicalHistory[]

  @@map("other_pet")
}

model File {
  id   Int    @unique() @default(autoincrement())
  name String @unique()

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  //relations
  medicalHistory   MedicalHistory @relation(fields: [medicalHistoryId], references: [id])
  medicalHistoryId Int            @map("medical_history_id")

  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  folderId Int?    @map("folder_id")

  @@map("file")
}

model Appointment {
  id          Int      @unique() @default(autoincrement())
  name        String
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  description String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  //relations
  client   User @relation(fields: [clientId], references: [id])
  clientId Int  @map("client_id")

  @@map("appointment")
}


model Product {
  id                 Int      @unique() @default(autoincrement())
  nameProduct        String
  descriptionProduct String
  category           Category
  sizeProduct        String
  sellingProduct     Float


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")
}

model Diagnostic {
  id          Int    @unique() @default(autoincrement())
  description String

  // relations
  medicalHistory       MedicalHistory?
  medicalHistoryId     Int?                  @map("medical_history_id")
  surgicalIntervations SugicalIntervention[]
  treatments           Treatment[]
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt() @map("updated_at")

  @@map("diagnostic")
}

model SugicalIntervention {
  id              Int      @unique() @default(autoincrement())
  name            String
  description     String?
  intervationDate DateTime @map("intervation_date")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // relations
  diagnostic   Diagnostic? @relation(fields: [diagnosticId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  diagnosticId Int?        @map("diagnostic_id")

  @@map("sugical_intervention")
}

model Treatment {
  id        Int    @unique() @default(autoincrement())
  name      String
  frecuency String
  days      Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  // relations
  diagnostic   Diagnostic? @relation(fields: [diagnosticId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  diagnosticId Int?        @map("diagnostic_id")

  @@map("treatment")
}

enum Category {
  accesorios
  alimentos
  bienestar
  entrenamiento
  higiene
  juguetes
  reproduccion
  terrario_acuario
  transporte
}
enum UserRole {
  admin
  client
}

enum Gender {
  macho
  hembra
}
